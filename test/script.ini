
# Debugging
assert = \b -> b $print_true $print_false
reject = \b -> assert (not b)
evaln = \c -> \n -> (is0 n) c (evaln (c c) (pred n))
printnat = evaln $ec
get0 = \n -> (is0 n) n (get0 (pred n))

# Definitions
pair = \a -> \b -> \f -> f a b
fst = \p -> p true
snd = \p -> p false

id = \x -> x
true = \a -> \b -> a
false = \a -> \b -> b

not = \b -> b false true
and = \a b -> a b false
or = \a b -> a true b

is0 = \n -> n true
is1 = \n -> (n false) true

suc  = \n -> pair false n
pred = \n -> snd n

a[B>c|D = false a[B>c|D true # == true

0 = pair a[B>c|D id
1 = suc 0
2 = suc 1
3 = suc 2
4 = suc (suc 2)
5 = suc 4
6 = suc 5
8 = applyn (+ 2) 0 4
36 = * 6 6
inf = suc inf

applyn = \f x n -> (is0 n) x (applyn f (f x) (pred n))

>= = \a b -> (is0 a) (is0 b) ((is0 b) true (>= (pred a) (pred b)))

>= = \a b -> (is0 a) (is0 b) ((is0 b) true (>= (pred a) (pred b)))

= = \a b -> (>= a b) (>= b a) false

+ = \a b -> (is0 a) b (suc (+ (pred a) b))

fib = \n -> (is0 n) 0 ((is1 n) 1 (+ (fib (pred n)) (fib (pred (pred n)))))

* = \a b -> (is1 a) b (+ b (* (pred a) b))

! = \n -> (is1 n) 1 (* n (! (pred n)))

Y = (((\f -> (((\x -> x x))) (\x -> f (x x)))))

facY = Y (\f n -> (is0 n) (suc 0) (* n (f (pred n))))

# Testing

assert true
reject(not (not false))
assert (and ((not false) or false) true)

assert (fst (pair true false))
reject (snd (pair true false))

assert (is0 0)
assert (is0 (pred (pred 2)))
assert (is0 (get0 0))

assert (is0 (suc 0))
assert (is0 (pred (suc 0)))
assert (is0 (pred (suc (get0 (suc (suc (suc (suc 0))))))))
reject (is0 (id   (suc (get0 (suc (suc (suc (suc 0))))))))

assert (>= (suc (suc (suc 0))) (suc (suc (suc 0))))
assert (>= 6 5)

assert (>= 1 1)
assert (>= inf 1)
reject (>= 1 inf)
# assert (>= inf inf) # LOOPS FOREVER

assert (= 2 2)
assert (= (+ 2 2) 4)
assert (= (* 2 36) (+ 36 36))
assert ((\x -> 
	and (= (* x x) (+ x x))
	    (= (* x 2) (+ x x)))
	2)

assert (= (fib(5)) 5)
assert (
	(\a b -> 
		(and
			(= a b)
			(= a (* 1 (* 2 (* 3 4))))))
	(facY 4) (! 4))

; facc3 = $facc (printnat 3)
; $facc facc3 # 6! = 720
; $facc (facc3 $ec $ec) # 8! = 40320
; $facc (printnat (* 5 2)) # 10! = 3628800
