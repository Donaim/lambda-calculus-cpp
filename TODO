[x] lazy evaluation
[x] fix unique lambda members (each member should have its own argument x)
[x] fix Y combinator case
[x] inline bindings: do not introduce overhead from bindings (think of implications to call-trace)
[x] allow order-independent bindings
[ ] cache evalutations [hard]
	[x] use simple hash map and store whole environment as cache key
	[x] determine which lambda abstractions are actually used in evaluation (will get more cache hits)
	[ ] fix (or find reason for) cache drop when using inlining - expected to have more hits than without inlining
	[ ] make base class (fun) more consistant
	[ ] add command line argument for caching
	[ ] use more efficient map than std::map and better keys than std::vector<int>
	[ ] use definitional irrelevance for smarter equality [hard]
[ ] representation: find a good way to print numbers, strings
[x] make more names legal
[ ] stackoverflow: use queue instead
[ ] memoryleaks: add Delete_NAME(ff) functions (simmilar to Init_NAME)
[ ] multithreading: consider evaluating each leaf at the same time
[ ] maybe use C instead of C++ (faster compile-time, maybe better optimisations)
[ ] code quality: rewrite everything in haskell