
; comment

; 1)
id = (\x -> x)

; 2)
true = (\a -> (\b -> a))

; 3)
false = (\a -> (\b -> b))

; To see anything
assert = (\b -> b $print_true $print_false)

; 4)
; not = \b -> b false true

; 5)
if = (\i -> (\a -> (\b -> i a b)))

; 6)
; kek = \a b -> (\x -> b) a             # same as <false>

; a[B>c|D = kek # testing invalid name

; 7)
pair = (\a -> (\b -> (\f -> f a b)))
fst = (\p -> p (\a -> (\b -> a)))
snd = (\p -> p (\a -> (\b -> b)))

; 8)
0 = ((\a -> (\b -> (\f -> f a b))) (\a -> (\b -> a)) (\x -> x))

; is0 = \n -> (fst n) true false
; is1 = \n -> is0 (pred n)
is0 = (\n -> n (\a -> (\b -> a)))
is1 = (\n -> (n (\a -> (\b -> b))) (\a -> (\b -> a)))

; suc  = \n -> pair false n
; pred = \n -> snd n
suc = (\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n)
pred = (\n -> n (\a -> (\b -> b)))

1 = ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\a -> (\b -> (\f -> f a b))) (\a -> (\b -> a)) (\x -> x)))
2 = ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\a -> (\b -> (\f -> f a b))) (\a -> (\b -> a)) (\x -> x))))
3 = ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\a -> (\b -> (\f -> f a b))) (\a -> (\b -> a)) (\x -> x)))))
4 = ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\a -> (\b -> (\f -> f a b))) (\a -> (\b -> a)) (\x -> x))))))
5 = ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\a -> (\b -> (\f -> f a b))) (\a -> (\b -> a)) (\x -> x)))))))
6 = ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\a -> (\b -> (\f -> f a b))) (\a -> (\b -> a)) (\x -> x))))))))

get0 = (\n -> ((\n -> n (\a -> (\b -> a))) n) n (get0 ((\n -> n (\a -> (\b -> b))) n)))

evaln = (\c -> (\n -> ((\n -> n (\a -> (\b -> a))) n) c (evaln (c c) ((\n -> n (\a -> (\b -> b))) n))))
printnat = (evaln $ec)

; printnat 6
; printnat (get0 6)

>= = (\a -> (\b -> ((\n -> n (\a -> (\b -> a))) a) ((\n -> n (\a -> (\b -> a))) b) (>= ((\n -> n (\a -> (\b -> b))) a) ((\n -> n (\a -> (\b -> b))) b))))

= = (\a -> (\b -> (>= a b) (>= b a) (\a -> (\b -> b))))

; assert (>= (suc (suc (suc 0))) (suc (suc (suc 0))))
((\b -> b $print_true $print_false) ((\a -> (\b -> (>= a b) (>= b a) (\a -> (\b -> b)))) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\a -> (\b -> (\f -> f a b))) (\a -> (\b -> a)) (\x -> x)))))))) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\n -> (\a -> (\b -> (\f -> f a b))) (\a -> (\b -> b)) n) ((\a -> (\b -> (\f -> f a b))) (\a -> (\b -> a)) (\x -> x))))))))))

; + = \a b -> (is0 a) b (suc (+ (pred a) b))

; printnat (+ 2 6)

; * = \a b -> (is1 a) b (+ b (* (pred a) b))

; printnat (* 2 6)

; ; ! = \n -> (is1 n) 1 (* n (! (pred n)))

; Y = (\f -> (\x -> x x) (\x -> f (x x)))

; kek = Y (\f n -> (is0 n) (suc 0) (f (pred n)))

; printnat (kek (suc (suc 0)))

; printnat (! 5)

; 36 = * 6 6

; printnat (* 36 6)

; assert (is0 (pred (pred 2)))
; assert false
; assert (is0 (0))
; assert (if (is0 0) true false)
; assert (is0 (get0 0))

; ; assert (if false false (not (not (not false))))
; ; assert true
; ; false id id

; ; false (kek id) (is0 0)

; assert (is0 (pred (suc (get0 (suc (suc (suc (suc 0))))))))
; assert (is0 (id   (suc (get0 (suc (suc (suc (suc 0))))))))

; assert (is0 (suc 0))
; assert (get0 0)
; assert (is0 (pred (suc 0)))
; assert false
; assert (fst (pair false true))
